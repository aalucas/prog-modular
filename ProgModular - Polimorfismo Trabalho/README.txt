ğŸ’»Trabalho de ProgramaÃ§Ã£o Modular


ğŸ“Œ Objetivo
 - Implementar funÃ§Ãµes PolimÃ³rficas, isto Ã©, uma funÃ§Ã£o em que seu comportamento pode ser flexÃ­vel
em relaÃ§aÃµ aos diferentes tipos de argumentos que ela recebe. Tal ideia deriva dos conceitos de polimorfismo
em ProgramaÃ§Ã£o, o qual possibilita que um mesmo cÃ³digo seja funcional independente das diversas estruturas de dados
que ele recebe.

 - AlÃ©m disso, para este trabalho foi solicitado a interpretaÃ§Ã£o e a implementaÃ§Ã£o de trÃªs funÃ§Ãµes 
distintas, chamadas de "pop", "next" e "middle".


ğŸ“– InterpretaÃ§Ã£o de Cada FunÃ§Ã£o

 - FunÃ§Ã£o "pop" =>  Em Linguagens de ProgramaÃ§Ã£o modernas (como Python ou JavaScript), o termo "pop" estÃ¡ associado a um mÃ©todo Ãºtil no
contexto de manipulaÃ§Ã£o de dados em diferentes estruturas de dados. Sua FunÃ§Ã£o primordial Ã© remover e retornar o Ãºltimo elemento de uma dada
estrutura de dado.
Neste Contexto, a FunÃ§Ã£o pop foi usada para remover o Ãºltimo elemento de uma estrutura de dados e, por fim, retornar ela sem seu Ãºltimo
elemento.

 - FunÃ§Ã£o "middle" e "next" => A funÃ§Ã£o Middle, assim como "next", seguiu os mesmos princÃ­pos de pop, mas com algumas diferenÃ§as.
A funÃ§Ã£o "middle" com base no tamanho da estrutura de dado, ela remove o elemento central (no caso de tamanho Ã­mpar) ou dois elementos
centrais (no caso de tamanho par). Por sua vez, a funÃ§Ã£o "next" tamanho tÃªm como objetivo remover o PRÃ“XIMO elemento de uma estrutura de 
dado, tendo como base um Ã­ndice especÃ­fico jÃ¡ previamente estabelecido pelo usuÃ¡rio.

ğŸ“š Resumindo os MÃ©todos Usados em Cada FunÃ§Ã£o

 - FunÃ§Ã£o pop



